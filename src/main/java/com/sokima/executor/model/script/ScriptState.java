package com.sokima.executor.model.script;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.io.Serializable;
import java.time.Duration;
import java.time.Instant;

@JsonInclude(JsonInclude.Include.NON_NULL)
public record ScriptState(
        /**
         * Unique identifier of script.
         */
        @JsonProperty("script_id") Long scriptId,

        /**
         * Unique nickname for identifying which scripts it is.
         */
        @JsonProperty("user_id") String userId,

        /**
         * Programming language for execution.
         */
        @JsonProperty("programming_language") ProgrammingLanguage programmingLanguage,

        /**
         * Body of provided JavaScript.
         */
        @JsonProperty("script_body") String scriptBody,

        /**
         * Execution status of current script.
         */
        @JsonProperty("execution_status") ExecutionStatus executionStatus,

        /**
         * Date when script was pushed.
         */
        @JsonProperty("created_at") Instant createdAt,

        /**
         * Date when started execution (when status switch to RUNNING),
         * otherwise nothing should be set.
         */
        @JsonProperty("start_at") Instant startAt,

        /**
         * Date when finished execution (status should eq CANCELLED or COMPLETED),
         * otherwise nothing should be set.
         */
        @JsonProperty("finished_at") Instant finishedAt,

        /**
         * Elapsed time in millis for execution (status should eq CANCELLED or COMPLETED),
         * otherwise nothing should be set.
         */
        @JsonProperty("execution_time") Duration executionTime,

        /**
         * Scheduled time (or Duration time) that obtained from user,
         * if nothing was obtained shouldn't be set.
         */
        @JsonProperty("scheduled_time") Duration scheduledTime,

        /**
         * Console output generated by the script during execution.
         */
        @JsonProperty("console_result") String consoleResult,

        /**
         * Console error generated by the script during execution.
         */
        @JsonProperty("console_error") String consoleError
) implements Serializable {

    public static ScriptState empty() {
        return empty(null);
    }

    public static ScriptState empty(Long scriptId) {
        return new ScriptState(
                scriptId,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
        );
    }

    public static ScriptState executionResultOf(ScriptState detailedScriptState) {
        return new ScriptState(
                detailedScriptState.scriptId(),
                detailedScriptState.userId(),
                detailedScriptState.programmingLanguage(),
                detailedScriptState.scriptBody(),
                detailedScriptState.executionStatus(),
                null,
                null,
                null,
                detailedScriptState.executionTime(),
                null,
                detailedScriptState.consoleResult(),
                detailedScriptState.consoleError()
        );
    }

    public static ScriptState briefOf(ScriptState detailedScriptState) {
        return new ScriptState(
                detailedScriptState.scriptId(),
                detailedScriptState.userId(),
                detailedScriptState.programmingLanguage(),
                null,
                detailedScriptState.executionStatus(),
                null,
                null,
                null,
                detailedScriptState.executionTime(),
                null,
                null,
                null
        );
    }

    public static ScriptState of(Long scriptId, String userId, ProgrammingLanguage programmingLanguage, String scriptBody, Duration scheduledTime) {
        return new ScriptState(
                scriptId,
                userId,
                programmingLanguage,
                scriptBody,
                ExecutionStatus.NEW,
                Instant.now(),
                null,
                null,
                null,
                scheduledTime,
                null,
                null
        );
    }

    public static ScriptState of(Script script) {
        return ScriptState.of(null, script.userId(), script.programmingLanguage(), script.scriptBody(), null);
    }

    public static ScriptState of(Long scriptId, String userId, ProgrammingLanguage programmingLanguage, String scriptBody) {
        return ScriptState.of(scriptId, userId, programmingLanguage, scriptBody, Duration.ZERO);
    }

    public static ScriptState changeScriptId(Long scriptId, ScriptState scriptState) {
        return new ScriptState(
                scriptId,
                scriptState.userId(),
                scriptState.programmingLanguage(),
                scriptState.scriptBody(),
                scriptState.executionStatus(),
                scriptState.createdAt(),
                scriptState.startAt(),
                scriptState.finishedAt(),
                scriptState.executionTime(),
                scriptState.scheduledTime(),
                scriptState.consoleResult(),
                scriptState.consoleError()
        );
    }

    public static ScriptState changeExecutionStatus(ScriptState scriptState, ExecutionStatus executionStatus) {
        return new ScriptState(
                scriptState.scriptId(),
                scriptState.userId(),
                scriptState.programmingLanguage(),
                scriptState.scriptBody(),
                executionStatus,
                scriptState.createdAt(),
                scriptState.startAt(),
                scriptState.finishedAt(),
                scriptState.executionTime(),
                scriptState.scheduledTime(),
                scriptState.consoleResult(),
                scriptState.consoleError()
        );
    }

    public static ScriptState updateStartAt(ScriptState scriptState) {
        return new ScriptState(
                scriptState.scriptId(),
                scriptState.userId(),
                scriptState.programmingLanguage(),
                scriptState.scriptBody(),
                scriptState.executionStatus(),
                scriptState.createdAt(),
                Instant.now(),
                null,
                null,
                scriptState.scheduledTime(),
                null,
                null
        );
    }

    public static ScriptState updateFinishedAt(ScriptState scriptState) {
        final Instant startAt = scriptState.startAt();
        final Instant finishedAt = Instant.now();
        return new ScriptState(
                scriptState.scriptId(),
                scriptState.userId(),
                scriptState.programmingLanguage(),
                scriptState.scriptBody(),
                scriptState.executionStatus(),
                scriptState.createdAt(),
                startAt,
                finishedAt,
                Duration.between(scriptState.startAt(), finishedAt),
                scriptState.scheduledTime(),
                scriptState.consoleResult(),
                scriptState.consoleError()
        );
    }

    public static ScriptState updateResult(ScriptState scriptState, String result) {
        return new ScriptState(
                scriptState.scriptId(),
                scriptState.userId(),
                scriptState.programmingLanguage(),
                scriptState.scriptBody(),
                scriptState.executionStatus(),
                scriptState.createdAt(),
                scriptState.startAt(),
                scriptState.finishedAt(),
                scriptState.executionTime(),
                scriptState.scheduledTime(),
                result,
                scriptState.consoleError()
        );
    }

    public static ScriptState updateError(ScriptState scriptState, String error) {
        return new ScriptState(
                scriptState.scriptId(),
                scriptState.userId(),
                scriptState.programmingLanguage(),
                scriptState.scriptBody(),
                scriptState.executionStatus(),
                scriptState.createdAt(),
                scriptState.startAt(),
                scriptState.finishedAt(),
                scriptState.executionTime(),
                scriptState.scheduledTime(),
                scriptState.consoleResult(),
                error
        );
    }

    public static ScriptState completion(ScriptState scriptState, Duration executionTime, String consoleResult, String consoleError) {
        return new ScriptState(
                scriptState.scriptId(),
                scriptState.userId(),
                scriptState.programmingLanguage(),
                scriptState.scriptBody(),
                scriptState.executionStatus(),
                scriptState.createdAt(),
                scriptState.startAt(),
                scriptState.finishedAt(),
                executionTime,
                scriptState.scheduledTime(),
                consoleResult,
                consoleError
        );
    }
}
